### CONFIGURATION FILE
start.insert.value = false

### DATABASE PARAMETERS
db.host = 192.168.0.20
db.port = 3106
db.schema = VideoBookApplication
db.password = mauro
db.user = mauro

### DEFAULT VALUE CATEGORY / POSITION
catpos.default.value = ----------

### VALUE NOT FOUND FOR QUERY
notfound.value = -1

### LEVENSTHEIN DISTANCE MAX
levensthein.max.distance = 4

### TOP CATEGORY VIEW
topcat.view = 5

### Google Books API
google.books.browser.api.key = AIzaSyCpuZOgKmwxODZiuWEWWIhb9ToCOEm5_3Q
google.books.schema = https
google.books.host = www.googleapis.com
google.books.path = books/v1/volumes
google.books.maxresults = 1
google.books.lang = it
google.books.print.type = books
google.books.sort = relevance
google.books.timeout = 7000

### QUERY PER USERS MODEL
users.insert.query = INSERT INTO USERS (USERNAME, FL_LIBRARY, FL_VIDEO, FL_MUSIC, FL_SOFTWARE, FL_SUPERUSER) VALUES (@user, @fllib, @flvid, @flmus, @flsw, @flsus)
users.read.query = SELECT * FROM USERS u WHERE u.USERNAME = @user

### QUERY PER CATEGORY MODEL
category.insert.query = INSERT INTO CATEGORIE (CATEGORIA) VALUES (@cat)
category.read.query = SELECT * FROM CATEGORIE c WHERE c.CATEGORIA=@cat
category.readbyid.query = SELECT * FROM CATEGORIE c WHERE c.ID_CATEGORIA=@idcat
category.readall.query = SELECT * FROM CATEGORIE c ORDER BY c.CATEGORIA

### QUERY PER POSITION MODEL
position.insert.query = INSERT INTO POSIZIONI (POSIZIONE) VALUES (@pos)
position.read.query = SELECT * FROM POSIZIONI WHERE POSIZIONE=@pos
position.readbyid.query = SELECT * FROM POSIZIONI WHERE ID_POSIZIONE=@idpos
position.readall.query = SELECT * FROM POSIZIONI ORDER BY POSIZIONE

### QUERY PER RESERVED MODEL
reserved.insert.query = INSERT INTO RESERVED (RESERVED, TYPE_RESERVED) VALUES (@res, @typeres)
reserved.read.query = SELECT * FROM RESERVED WHERE TYPE_RESERVED = @typeres

### QUERY WORD2COGNOME
word2cognome.readone.query = select a.ID_WORD, a.WORD, c.ID_AUTORE, c.COGNOME, c.NOME from WORD_MASTER a, WORD2COGNOME b, AUTORI c where a.WORD = @wcognome and b.WORD_MASTER_ID_WORD = a.ID_WORD and c.ID_AUTORE=b.AUTORI_ID_AUTORE

### QUERY WORD2NOME
word2nome.readone.query = select a.ID_WORD, a.WORD, c.ID_AUTORE, c.COGNOME, c.NOME from WORD_MASTER a, WORD2NOME b, AUTORI c where a.WORD = @wnome and b.WORD_MASTER_ID_WORD = a.ID_WORD and c.ID_AUTORE=b.AUTORI_ID_AUTORE

### QUERY BOOKS
books.readmany.byauthor.query = SELECT a.ID_LIBRO, a.TITOLO, a.SERIE, a.FL_EBOOK, a.DT_INSERT, IFNULL(b.ID_POSIZIONE, - 1) AS ID_POSIZIONE, b.POSIZIONE, IFNULL(c.ID_CATEGORIA, -1) as ID_CATEGORIA, c.CATEGORIA, IFNULL(d.ID_INFOLIBRO, - 1) AS ID_INFOLIBRO, d.EDITORE, d.IMG, d.ISBN, d.YEAR, IFNULL(d.TRAMA, " ") AS TRAMA, d.URL_SCHEDA, IFNULL(e.ID_NOTA, - 1) AS ID_NOTA, e.NOTA, f.ID_AUTORE, f.COGNOME, f.NOME FROM LIBRI a LEFT JOIN POSIZIONI b ON a.POSIZIONI_ID_POSIZIONE = b.ID_POSIZIONE LEFT JOIN CATEGORIE c ON a.CATEGORIE_ID_CATEGORIA = c.ID_CATEGORIA LEFT JOIN INFOLIBRI d ON a.INFOLIBRI_ID_INFOLIBRO = d.ID_INFOLIBRO LEFT JOIN NOTELIBRI e ON a.NOTELIBRI_ID_NOTA = e.ID_NOTA, AUTORI f WHERE a.AUTORI_ID_AUTORE = @idauth AND a.AUTORI_ID_AUTORE=f.ID_AUTORE 
books.write.query = insert into LIBRI (TITOLO, SERIE, FL_EBOOK, AUTORI_ID_AUTORE, CATEGORIE_ID_CATEGORIA, POSIZIONI_ID_POSIZIONE, DT_INSERT, INFOLIBRI_ID_INFOLIBRO, NOTELIBRI_ID_NOTA) values (@title, @serie, @flebook, @idauth, @idcat, @idpos, @dtinsert, @info, @nota)
books.readmaxid.query = select max(ID_LIBRO) as id_libro from LIBRI
books.countall.query = select count(ID_LIBRO) as cnt from LIBRI
books.countebook.query = select count(ID_LIBRO) as cnt from LIBRI where FL_EBOOK = @flebook
book.readbyid.query = SELECT a.ID_LIBRO, a.TITOLO, a.SERIE, a.FL_EBOOK, a.DT_INSERT, IFNULL(b.ID_POSIZIONE, - 1) AS ID_POSIZIONE, b.POSIZIONE, IFNULL(c.ID_CATEGORIA, -1) as ID_CATEGORIA, c.CATEGORIA, IFNULL(d.ID_INFOLIBRO, - 1) AS ID_INFOLIBRO, d.EDITORE, d.IMG, d.ISBN, d.YEAR, IFNULL(d.TRAMA, " ") AS TRAMA, d.URL_SCHEDA, IFNULL(e.ID_NOTA, - 1) AS ID_NOTA, e.NOTA, f.ID_AUTORE, f.COGNOME, f.NOME FROM LIBRI a LEFT JOIN POSIZIONI b ON a.POSIZIONI_ID_POSIZIONE = b.ID_POSIZIONE LEFT JOIN CATEGORIE c ON a.CATEGORIE_ID_CATEGORIA = c.ID_CATEGORIA LEFT JOIN INFOLIBRI d ON a.INFOLIBRI_ID_INFOLIBRO = d.ID_INFOLIBRO LEFT JOIN NOTELIBRI e ON a.NOTELIBRI_ID_NOTA = e.ID_NOTA, AUTORI f WHERE a.ID_LIBRO = @idbook AND a.AUTORI_ID_AUTORE=f.ID_AUTORE 

### QUERY NOTE
booknote.write.query = insert into NOTELIBRI (NOTA) values (@note)
booknote.readmaxid.query = select max(ID_NOTA) as id_nota from NOTELIBRI

### QUERY INFOLIBRI
infobook.write.query = insert into INFOLIBRI (IMG, EDITORE, ISBN, YEAR, TRAMA, URL_SCHEDA) values (@img, @edit, @isbn, @anno, @descr, @sk)
infobook.readmaxid.query = select max(ID_INFOLIBRO) as id_info from INFOLIBRI


### QUERY AURORE
author.write.query = insert into AUTORI (COGNOME, NOME) values (@cogn, @nam)
author.readmaxid.query = select max(id_autore) as id_autore from AUTORI
author.countall.query = select count(ID_AUTORE) as cnt from AUTORI

### WORD MASTER QUERY
wordmaster.readbyword.query = select ID_WORD from WORD_MASTER where WORD = @word
wordmaster.write.query = insert into WORD_MASTER (WORD) values (@word)

### WORD2COGNOME QUERY
word2cognome.write.query = insert into WORD2COGNOME (WORD_MASTER_ID_WORD, AUTORI_ID_AUTORE) values (@idw, @ida)

### WORD2NOME QUERY
word2nome.write.query = insert into WORD2NOME (WORD_MASTER_ID_WORD, AUTORI_ID_AUTORE) values (@idw, @ida)

### WORD2BOOK QUERY
word2book.write.query = insert into WORD2BOOK (WORD_MASTER_ID_WORD, LIBRI_ID_LIBRO) values (@idw, @idb)

### QUERY PER GESTIONE FORZATURA STEMMER
stemmer.readall.query = SELECT * FROM STEMMER_FORCE

### QUERY PER STATISTICHE
stat.catbookcount.query = select * from ( select replace(a.CATEGORIA,"----------","N.D.") as CATEGORIA, count(*) as cnt from CATEGORIE a, LIBRI b where a.ID_CATEGORIA=b.CATEGORIE_ID_CATEGORIA group by a.CATEGORIA )d  order by d.cnt desc